<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>搭建自己的ChatGPT</title>
    <link href="/2023/04/02/%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84ChatGPT/"/>
    <url>/2023/04/02/%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84ChatGPT/</url>
    
    <content type="html"><![CDATA[<h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>当今，自然语言处理（NLP）技术的快速发展已经为人工智能（AI）领域的许多应用带来了变革性的机遇。ChatGPT是一款基于OpenAI的自然语言处理技术，能够生成高质量的自然语言对话。它采用预训练技术和深度神经网络模型，不断地学习语言数据并生成更加生动、自然的对话内容。在写文案、编程、提问等相关领域非常出彩，本文将介绍如何自己在本地部署ChatGPT-Web，让你能够自己安心使用ChatGPT，本文为<strong>小白教程</strong>，力求每个零基础的人都能搭建属于自己的ChatGPT，让AI运用到生活中的各处去；</p><p>在此，特别鸣谢OpenAI开发的<a href="https://openai.com/">GPT模型</a>，帮助了我很多；还有开源项目<a href="https://github.com/Chanzhaoyu/chatgpt-web">ChatGPT-Web</a>，没有它就没有本文的部署教程！</p><h1 id="正文："><a href="#正文：" class="headerlink" title="正文："></a>正文：</h1><p>在部署自己的ChatGPT之前，让我们先准备，我们部署需要准备什么？</p><ol><li>Linux主机（Windows主机）</li><li>Docker操作（别担心，我会教你）</li><li>理解域名、IP和端口（Option选项，可理解可不理解）</li></ol><h3 id="主机"><a href="#主机" class="headerlink" title="主机"></a>主机</h3><p>部署ChatGPT的主机可以选择本地电脑，也可以选择服务器（所谓的服务器，粗略理解，就是一台在别的地方一直开机的电脑）。在哪部署，取决于你的使用方式，如果你只想在本地使用，可以选择在<strong>本地电脑</strong>中部署；如果想多端使用，在手机、电脑或分享给你的好友使用，那就最好部署在<strong>服务器</strong>中</p><h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h3><p>Docker是目前比较主流的部署应用方案。为什么要用Docker呢？原因有：</p><ol><li>通过使用Docker可以减少环境的配置（所谓的环境配置，例如你要运行一个java程序，你的计算机就必须安装java语言包；你要运行python程序，就必须安装python语言包），加快应用的部署速度</li><li>可以通过Docker来管理应用的开启与关闭</li></ol><h3 id="域名与端口（可选）"><a href="#域名与端口（可选）" class="headerlink" title="域名与端口（可选）"></a>域名与端口（可选）</h3><p>域名是用于标识和访问互联网上的网站和资源的一种字符串形式的地址。它是由一串字母、数字和连字符所组成的，能够识别和表示互联网上的计算机、服务和设备。域名的作用类似于一个门牌号码，它可以让用户在不需要记住复杂的IP地址的情况下直接访问同一个站点或服务。例如：baidu.com 对于的 ip 就是110.242.68.66</p><p>IP 是互联网协议的简称。它是一种通信规则，用于在互联网上传输数据。类似生活中的电话号码（小区地址），用于在互联网中找到你的计算机。</p><p>端口是一种用于指示进程或应用程序的通信端点的抽象概念。例如通过ip找到你的计算机了，那我怎么区分你的计算机上不同的服务呢？答案就是端口。例如你的计算机上面运行了A服务和B服务，那我可以通过<strong>你的计算机IP+A端口</strong>来访问A服务，通过<strong>计算机IP+B端口</strong>来运行B服务。</p><h3 id="正式部署教程"><a href="#正式部署教程" class="headerlink" title="正式部署教程"></a>正式部署教程</h3><p>在理解上述的概念后，正式开始我们的部署教程</p><h3 id="1、准备主机"><a href="#1、准备主机" class="headerlink" title="1、准备主机"></a>1、准备主机</h3><p><strong>若准备部署在本地</strong>，考虑到大多数的电脑都是Windows操作系统<del>or Linux操作系统</del>，第一步教程将讲解如何准备Docker环境</p><p>首先来到docker的<a href="https://www.docker.com/">官网</a>，点击之后下载Docker的软件包到你喜欢的路径，<strong>先别安装！</strong></p><p><img src="https://img.talk-qys.top/img/image-20230402175710107.webp" alt="image-20230402175710107"></p><p>Windows用户打开控制面板，进入到控制面板<img src="https://img.talk-qys.top/img/image-20230402175830607.webp" alt="image-20230402175830607" style="zoom: 67%;" /></p><p>通过启用功能，打开Hyper-V、适用于Linux的Windows子系统和虚拟机平台</p><p><img src="https://img.talk-qys.top/img/image-20230402175930670.webp" alt="image-20230402175930670"></p><p><img src="https://img.talk-qys.top/img/image-20230402175944285.webp" alt="image-20230402175944285"></p><p>在开启后，重启计算机，并可启用Windows Subsystem for Linux（WSL） Linux子系统</p><p>然后我们在 Microsoft Store 中下载新版 Ubuntu 镜像</p><img src="https://img.talk-qys.top/img/image-20230402180341382.webp" alt="image-20230402180341382" style="zoom: 67%;" /><p>在安装后输入以下命令，查看wsl的版本为1还是2</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">wsl -<span class="hljs-literal">-list</span> <span class="hljs-literal">-v</span><br></code></pre></td></tr></table></figure><p><img src="https://img.talk-qys.top/img/image-20230402180520676.webp" alt="image-20230402180520676"></p><p>在确认自己的版本为2之后，即可开始安装docker</p><p>在安装完docker之后，打开docker的设置界面，确实自己启用的是wsl的后端即可</p><p><img src="https://img.talk-qys.top/img/image-20230403180947740.webp" alt="image-20230403180947740"></p><p><strong>若准备部署的云端</strong>，大部分的云端服务器的操作系统都是Linux操作系统，可以直接通过在阿里云中购买轻量应用服务器，来使用（默认安装好docker）</p><p>阿里云服务器购买链接（<a href="https://www.aliyun.com/product/swas">点我</a>），选择亚太地区，docker镜像，按照自己的经济实力选择配置<img src="https://img.talk-qys.top/img/image-20230403182701446.webp" alt="image-20230403182701446"></p><p>在购买完成后，应该能在控制台中的轻量应用服务器中看到自己的服务器<img src="https://img.talk-qys.top/img/image-20230404182206444.webp" alt="image-20230404182206444"></p><p>在服务器信息中看到自己的<strong>ip地址（公）（注意不要泄露出去）</strong>，点击重置密码，设置你个人喜欢的密码</p><p><img src="https://img.talk-qys.top/img/image-20230403183252680.webp" alt="image-20230403183252680"></p><p>在得到ip和你自己的密码后，我们将使用powershell来进行ssh连接到云服务器上</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">ssh root<span class="hljs-selector-tag">@</span>&#123;你的服务器ip&#125;<br></code></pre></td></tr></table></figure><p>然后输入yes，再输入密码，注意密码是<strong>没有显示的</strong>，不要认为自己没有输入！ </p><p><img src="https://img.talk-qys.top/img/image-20230404181221327.webp" alt="image-20230404181221327"></p><p>在输入进入到终端，输入以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mkdir chatgpt &amp;&amp; <span class="hljs-built_in">cd</span> chatgpt &amp;&amp; touch docker-compose.yml<br></code></pre></td></tr></table></figure><p>这是一行包含三个 Bash 命令的串联操作，用于创建一个名为 <code>chatgpt</code> 的新目录，并在其中创建一个名为 <code>docker-compose.yml</code> 的文件。 该命令可以按以下方式分解：</p><ul><li><code>mkdir chatgpt</code>: 创建一个名为 <code>chatgpt</code> 的新目录。 </li><li> <code>cd chatgpt</code>: 进入 <code>chatgpt</code> 目录。</li><li><code>touch docker-compose.yml</code>: 创建一个名为 <code>docker-compose.yml</code> 的空文件。</li></ul><p><img src="https://img.talk-qys.top/img/image-20230404174143397.webp" alt="image-20230404174143397"></p><p>输入以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nano docker-compose.yml<br></code></pre></td></tr></table></figure><p>会出现以下界面</p><p><img src="https://img.talk-qys.top/img/image-20230404174501845.webp" alt="image-20230404174501845"></p><p>复制以下内容到里面</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">app:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">chenzhaoyu94/chatgpt-web</span> <span class="hljs-comment"># 总是使用 latest ,更新时重新 pull 该 tag 镜像即可</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">unless-stopped</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">3002</span><span class="hljs-string">:3002</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-attr">OPENAI_API_KEY:</span> &#123;<span class="hljs-string">你的token或者你的key</span>&#125;<br>      <span class="hljs-attr">OPENAI_API_BASE_URL:</span> &#123;<span class="hljs-string">你的token对于的api</span>&#125;<br>      <span class="hljs-attr">OPENAI_API_MODEL:</span> <span class="hljs-string">gpt-3.5-turbo-0301</span> <span class="hljs-comment">#聊天的模型</span><br>      <span class="hljs-attr">AUTH_SECRET_KEY:</span> &#123;<span class="hljs-string">password</span>&#125; <span class="hljs-comment">#密码，防止其他人乱用你的额度</span><br>      <span class="hljs-attr">TIMEOUT_MS:</span> <span class="hljs-number">60000</span><br></code></pre></td></tr></table></figure><p>通过快捷键<strong>CTRL+O</strong>进行保存，<strong>CTRL+X</strong>进行退出。</p><h3 id="2、购买API"><a href="#2、购买API" class="headerlink" title="2、购买API"></a>2、购买API</h3><p>key 和 api 的选择有3种方案：</p><ul><li>OpenAI 官方：需要自备国外信用卡（香港不行），且主机具备访问官方api的能力</li><li>API2D：Server酱作者推荐，有完整的文档，不需要主机具备访问官方api的能力，价格约为官方价格的1.5倍</li><li>第三方大佬Key：不太稳定，但胜在便宜量大</li></ul><p><strong>OpenAI官方：</strong></p><img src="https://img.talk-qys.top/img/image-20230404175050328.webp" alt="image-20230404175050328" style="zoom:67%;" /><p>自己创建secret key， 官方api的访问网址为：<a href="https://api.openai.com/">https://api.openai.com</a></p><p><strong>API2D</strong>：</p><p><img src="https://img.talk-qys.top/img/1680601973652.webp" alt="1680601973652"></p><p>通过创建自己的forward key， api2d的api访问网址为：<a href="https://stream.api2d.net/">https://stream.api2d.net</a></p><p>通过作者的推荐网址进行购买，<a href="https://api2d.com/r/186624">https://api2d.com/r/186624</a> , 作者可以获得奖励（写教程不易，希望大家可以通过这个链接购买，作者可以获得100p的奖励）</p><p><strong>第三方大佬Key：</strong><img src="https://img.talk-qys.top/img/image-20230404175737658.webp" alt="image-20230404175737658"></p><p>通过作者的推荐网址购买，<a href="https://fa.zhifenn.com/?i=98jfb2">https://fa.zhifenn.com/?i=98jfb2</a></p><p>作者可以获得奖励（写教程不易，希望大家可以通过这个链接购买，作者可以获得5w字的奖励）</p><p>第三方大佬的api访问网址为：<a href="https://chat-chatgpt-kmfviptdmu.us-west-1.fcapp.run/openai">https://chat-chatgpt-kmfviptdmu.us-west-1.fcapp.run/openai</a></p><p>将上述你购买得到的key和api访问网址，填入到docker-compose.yml的文件中，运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker-compose up -d<br></code></pre></td></tr></table></figure><p>命令，即可运行成功！</p><p><img src="https://img.talk-qys.top/img/image-20230404180124711.webp" alt="image-20230404180124711"></p><h3 id="3、访问！"><a href="#3、访问！" class="headerlink" title="3、访问！"></a>3、访问！</h3><p>最后通过浏览器访问你的ip地址+3002端口即可！</p><p>本地部署访问的网址：<code>localhost:3002</code></p><p>服务器部署访问的网址：<code>&#123;你的服务器的公网IP:3002&#125;</code></p><p><img src="https://img.talk-qys.top/img/1680602666368.webp" alt="1680602666368"></p>]]></content>
    
    
    <categories>
      
      <category>Home-Lab</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ChatGPT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Home-Lab教程第一篇</title>
    <link href="/2023/01/13/Home-Lab%E6%95%99%E7%A8%8B%E7%AC%AC%E4%B8%80%E7%AF%87/"/>
    <url>/2023/01/13/Home-Lab%E6%95%99%E7%A8%8B%E7%AC%AC%E4%B8%80%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>最近的一年都在忙手头上的事情，很久都没有进行过有效的学习自己感兴趣的内容，包括各种programing 、stock 和 fund相关的东西了，今天打算写点东西讲解下自己1年前搭建的home-lab的教程，并用作纪念</p><h2 id="正文："><a href="#正文：" class="headerlink" title="正文："></a>正文：</h2><h3 id="必要准备"><a href="#必要准备" class="headerlink" title="必要准备"></a>必要准备</h3><p>在搭建自己的home-lab（家庭服务器）之前，你得想清楚自己这么搭建是为了做什么？本人就是因为为了学习Linux而搭建的。原因有其下：</p><ol><li><p>阿里云的服务器费用对于学生来讲太贵了（接近200/年），且配置和网络带宽太低。在大二的时候，本人尝试自己编写java和vue.js的前后端分离的博客网站的时候，部署在阿里云的服务器上，结果体验非常不好，且需要自己搭配CDN来使用（又一笔消费）</p></li><li><p>大二、大三的时候对虚拟机的狂热，自己经常试着搭建各种虚拟机。因为逐渐认识到自己买来的电脑性能很多时候都不能完全用上，所以打算通过开虚拟机的途径来实现性能的利用率提高</p></li><li><p>通过对虚拟机的认识，加深自己对Linux的认识</p></li></ol><h3 id="硬件准备"><a href="#硬件准备" class="headerlink" title="硬件准备"></a>硬件准备</h3><p>在入门home-lab之前，先弄懂自己搭建home-lab的主要用途是什么？计算型（主要用于跑程序）？存储型（NAS）？亦或者是图形计算型（GPU）？</p><p>本人选择的方向是计算型，因为我主要用来运行Linux操作系统和Docker等相关服务，主要用来作为一台类似云主机的功能，所以我的硬件选择方向是偏向于强的CPU、大内存</p><p><strong>CPU选择</strong></p><p>当时最火的cpu之间莫过于是AMD的5800x和INTEL的11代i7，在经过选择之后，本人选择AMD5800x，因为它的核心数更多，且制程相对更好，对多线程的操作会更好</p><p><strong>内存选择</strong></p><p>想跑多台虚拟机，一定需要大的内存，个人认为最好 &gt;= 16G内存，本人的Home-Lab服务器配置了32G内存，在目前开了相对足够的虚拟机之后，内存占用16G，swap分区吃了2G，相对盈余</p><p><img src="https://img.talk-qys.top/img/1673577620789.png"></p><h3 id="软件准备"><a href="#软件准备" class="headerlink" title="软件准备"></a>软件准备</h3><p>选择虚拟机的操作系统上，当前主流的虚拟机宿主机操作系统主要有3家，分别为VMWARE ESXI、PROXMOX VE 和 UNRAID</p><p><img src="https://img.talk-qys.top/img/872610-20181221110758825-695653625.png" style="zoom:50%;" /><img src="https://img.talk-qys.top/img/proxmox-800x800.jpg" style="zoom:50%;" /><img src="https://img.talk-qys.top/img/v2-06b960f5a4518e9787609e3a10a617cd_1440w.png" style="zoom: 50%;" /></p><p>由于VMWARE对网卡的选择高和UNRAID的虚拟机性能相对不强，故本人选择使用PROXMOX VE（以下简称PVE）来作为宿主机的操作系统。</p><p>这里是pve的安装教程</p><p><a href="https://www.jianshu.com/p/c7636488b27a">Proxmox VE（PVE）安装教程 - 简书 (jianshu.com)</a></p><p>在pve的安装过程中，可能会涉及到Linux的文件系统的一个问题，如果是小白的话，一般选择EXT4的文件系统，下面列出Linux的常用的文件系统链接</p><p><a href="https://wiki.archlinuxcn.org/wiki/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F">文件系统 - Arch Linux 中文维基 (archlinuxcn.org)</a></p><p>本人因为只有一块1T的SSD硬盘，所以为了能玩得到足够的虚拟机，所以选择使用BTRFS的文件系统，BTRFS能够进行文件压缩，能够自动进行硬盘的TRIM操作。</p><p>等安装完成后，等待下一篇的教程</p><h3 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h3><p>本人好久没写了，所以文字可能不通顺，本周尽快鸽出第二篇！</p>]]></content>
    
    
    <categories>
      
      <category>Home-Lab</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PVE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022年1月1日</title>
    <link href="/2022/01/01/2021%E5%B9%B41%E6%9C%881%E6%97%A5/"/>
    <url>/2022/01/01/2021%E5%B9%B41%E6%9C%881%E6%97%A5/</url>
    
    <content type="html"><![CDATA[<h2 id="正文："><a href="#正文：" class="headerlink" title="正文："></a>正文：</h2><p>首先，先2022年快乐！实话讲，我不相信今年会更好什么之类的话，因为时间是连续的，年份只是人类虚构出来用于统计的单位，2022年第一天和2021年最后一天，不会有任何本质的区别。</p>]]></content>
    
    
    <categories>
      
      <category>随便说说</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>21年10月份随便说说</title>
    <link href="/2021/10/10/21%E5%B9%B410%E6%9C%88%E8%BF%91%E6%9C%9F%E6%80%9D%E8%80%83/"/>
    <url>/2021/10/10/21%E5%B9%B410%E6%9C%88%E8%BF%91%E6%9C%9F%E6%80%9D%E8%80%83/</url>
    
    <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>最近有点忙啊，各种烦心事席卷而来，看着别人辉煌，自己也很羡慕，随便写点东西发发牢骚算了~</p><h2 id="正文："><a href="#正文：" class="headerlink" title="正文："></a>正文：</h2><p>近期感悟：还是不要容易听信别人大V所说的，要有自己的独立思考。我收回我上一篇的关于同时买入白酒和医疗的话，因为这两个板块往往经常涨跌，所以只需要买一个板块就好，近期可以看多一波白酒。等后面差不多卖一波再展示收益率</p>]]></content>
    
    
    <categories>
      
      <category>随便说说</category>
      
    </categories>
    
    
    <tags>
      
      <tag>股票</tag>
      
      <tag>基金</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于自己对最近的基金与股票的思考</title>
    <link href="/2021/09/12/%E5%85%B3%E4%BA%8E%E8%87%AA%E5%B7%B1%E5%AF%B9%E6%9C%80%E8%BF%91%E7%9A%84%E5%9F%BA%E9%87%91%E4%B8%8E%E8%82%A1%E7%A5%A8%E7%9A%84%E6%80%9D%E8%80%83/"/>
    <url>/2021/09/12/%E5%85%B3%E4%BA%8E%E8%87%AA%E5%B7%B1%E5%AF%B9%E6%9C%80%E8%BF%91%E7%9A%84%E5%9F%BA%E9%87%91%E4%B8%8E%E8%82%A1%E7%A5%A8%E7%9A%84%E6%80%9D%E8%80%83/</url>
    
    <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>最近A股市场行情变化多端，从开年的蓝筹暴跌=&gt;中期中概股腰斩=&gt;新能源势头崛起=&gt;顺周期股票快速拉升，让我们这些散户，是有一个热点追一个热点的玩。虽说盈利，但基本上吃不到肉。那么在接下来，我们该怎么做呢？</p><h2 id="正文："><a href="#正文：" class="headerlink" title="正文："></a>正文：</h2><p>对于手上没有太多筹码的同学，我个人的卑微看法是，还是持有基金比较好。一、基金的买入成本相对较低（在万元买入以下）二、上车的成本也低（一些基金的最低买入金额最低为10元，约等于一顿饭钱）三、一般选购的基金都是优秀的基金经理替你打理，所以不大会出现类似“自己”操作股票出现的“追涨杀跌”的情况。</p><p>那么，我们该如何选择基金呢？在我的目前看来，我还是比较看好三个板块（虽然已经跌的妈都不认得了）。分别是新能源、白酒与医疗。有些人可能会说，最近白酒、医疗都在回调，白酒已经回调了差不多30个点了，你怎么还在推荐购买呢。我的观点是，买入比较好的蓝筹和龙头，经过时间的流逝，最终还是会盈利的。医疗也是同样的道理。而新能源，由于目前可能经历“第三次能源革命”，所以我们要把握住机会，享受时代的红利。但同时，也要注意自己的仓位是否过高，估值过高，不然短期的回调还是会让你肉痛的（我已经麻了）。</p><p>下面分别推荐我自己买入并持有的基金</p><p><img src="https://img.talk-qys.top/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20210912084446.png"></p><p><img src="https://img.talk-qys.top/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20210912084443.png"></p><p><img src="https://img.talk-qys.top/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20210912084439.png"></p><p><img src="https://img.talk-qys.top/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20210912084426.png"></p><p>另外加推纳斯达克指数，美股科技，yyds。大家也可以看到我在白酒、医疗上彻底的“韭”了，这和我之前不懂得“落袋为安”有关。去年，19-20年，一整年的牛市，让我彻底的飘了，没有进行深刻的思考，认为买基金就是无脑梭哈，结果今年市场给我上了一堂课。</p><p>在基金的定投上，建议运用<a href="https://www.bilibili.com/video/BV1gQ4y1r71v?from=search&seid=9733568475127155899&spm_id_from=333.337.0.0">4%定投法</a>，这样可以兼顾收益与成本，但唯一的缺点就是要在三点前盯盘。</p><p>基金适合长期养，而股票适合短线操作（这是我自己认为的）。股票上，我还是比较推崇“趋势投资”，即市场喜欢什么，你就去买什么，本质上就是一个“击鼓传花”的游戏。但由于目前我还不是很深入股票（停留中玩玩的阶段），所以日后有新的感想，再来分享。</p><h2 id="后序："><a href="#后序：" class="headerlink" title="后序："></a>后序：</h2><p>虽然本次，只是分享了自己的“韭”建，但也是自己进入市场开始玩了一年的感悟。切记，不要拿自己的刚需钱，卖房钱去玩投资，不然带给你的影响是巨大的，最后用一张图来结束本篇博文。</p><p><img src="https://img.talk-qys.top/img/src=http___img5.duote.com_duoteimg_dtnew_techup_img_202102_20210225162423_16810.jpg&refer=http___img5.duote.jfif"></p>]]></content>
    
    
    <categories>
      
      <category>随便说说</category>
      
    </categories>
    
    
    <tags>
      
      <tag>股票</tag>
      
      <tag>基金</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>近期学习安排</title>
    <link href="/2021/09/10/%E8%BF%91%E6%9C%9F%E5%AD%A6%E4%B9%A0%E5%AE%89%E6%8E%92/"/>
    <url>/2021/09/10/%E8%BF%91%E6%9C%9F%E5%AD%A6%E4%B9%A0%E5%AE%89%E6%8E%92/</url>
    
    <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>最近成懒狗了，不怎么想写文章，也不怎么想打代码，想当个混子（不是），哈哈，下面随便写点流水账记录下生活吧。</p><h2 id="回顾："><a href="#回顾：" class="headerlink" title="回顾："></a>回顾：</h2><p>最近自己一直在背诵教资科二的主观题（怎么这么多啊！！！！），截致现在为止，背诵到第四章，还有好多啊！仍需要努力，自己最近也对linux开始重拾兴趣，估计以后会发几篇关于linux的博客（挖坑ing），现在目前进展还算可以，学校没啥功课需要完成，尽自己最大的努力干教资吧，希望能够拿下，对得住自己的210块钱的报名费。</p><p>接下来，争取一周写一篇blog（趁我现在还有素材）！</p>]]></content>
    
    
    <categories>
      
      <category>随便说说</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>7月末8月学习计划</title>
    <link href="/2021/07/24/7%E6%9C%88%E6%9C%AB8%E6%9C%88%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/"/>
    <url>/2021/07/24/7%E6%9C%88%E6%9C%AB8%E6%9C%88%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/</url>
    
    <content type="html"><![CDATA[<h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>暑假也差不多过了一半了，又荒废了差不多半个7月了，对spring-cloud的学习也一知半解</p><h1 id="计划："><a href="#计划：" class="headerlink" title="计划："></a>计划：</h1><p>准备到大三，也差不多要想想自己的未来后路怎么走了，毕竟试错的时间还剩下一年。回想自己的2年，都在学自己喜欢的内容，但当面对真正自己的毕业去向时，还是有点陷入迷茫。</p><p>目前计划，在8月末前学习完教资科二科一，晚上利用空闲时间学习spring-cloud重新改写blog后端（不玩游戏了）。不过有一说一，教资科二的东西还是好多啊。学了头三节还这么多，</p><p><img src="https://img.talk-qys.top/img/4a879daeec5359a33040d1ed182cf8b.png"></p><p>整理资料的感觉还是真不错的，只不过有好多东西要背，真的难顶（对于我一个工科生来说）。希望10月底的考试能够对得起自己现在的努力。加油吧！</p>]]></content>
    
    
    <categories>
      
      <category>随便说说</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计划</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker部署文章</title>
    <link href="/2021/07/20/docker%E9%83%A8%E7%BD%B2%E6%96%87%E7%AB%A0/"/>
    <url>/2021/07/20/docker%E9%83%A8%E7%BD%B2%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p>最近搞好搭好了博客的第一版，心里变想着想写一篇技术博客，用作自己该网站的第一篇技术文章。</p><h2 id="什么是docker？"><a href="#什么是docker？" class="headerlink" title="什么是docker？"></a>什么是docker？</h2><p>docker的定义相信网上都有很多种解释，其中说的最多的就是在简述docker是一种集装箱的思想。</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-code">+--------------------------+</span><br><span class="hljs-section">|       Applications       |</span><br><span class="hljs-section">+--------------------------+</span><br>|<span class="hljs-code">+------------------------+</span>|<br>||    Runtime Library     ||<br>|<span class="hljs-code">+------------------------+</span>|<br>||         Kernel         ||<br>|<span class="hljs-code">+------------------------+</span>|<br><span class="hljs-section">|     Operating System     |</span><br><span class="hljs-section">+-----+--------+-----------+</span><br><span class="hljs-section">| CPU | Memory | IO Device |</span><br><span class="hljs-section">+-----+--------+-----------+</span><br></code></pre></td></tr></table></figure><p>即把所有的有关软件，依赖库都打包一起，形成一个所谓的“集装箱”，在linux这艘“大船”上搭载，而对于我目前来说，我认为docker有点类似一个应用商店的概念，它能够将你所想要的”中间件”从docker hub中拉取下来，并部署在主机上。更有趣的是，它能够省略很多麻烦的事情，例如安装redis，rabbitmq等中间件，你需要自己编译redis或者安装erlang才能开始使用这些中间件，而现在通过一行命令即可部署.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">docker pull <span class="hljs-tag">&lt;<span class="hljs-name">target_package</span>&gt;</span> <br></code></pre></td></tr></table></figure><p>docker原生支持linux，即它是based on linux的。而windows 和 macos 想要安装docker，则需要用到虚拟机机制，由于作者本人手中没有macos的机器，下面以windows的操作命令作为示范。</p><h2 id="windows安装docker"><a href="#windows安装docker" class="headerlink" title="windows安装docker"></a>windows安装docker</h2><p>首先，得确认你的系统不能是home（家庭版），否则你将不能开启hyper-v，进而不能开启wsl2。而docker在windows下的运行需要依赖wsl2，所以请确保你能安装之后，再去到docker官网安装docker—-&gt;<a href="https://www.docker.com/">docker官网</a></p><p>等待安装好之后，一般docker是安装在C盘上，所以我们需要将虚拟盘迁出c盘，放在你想安装的盘上。<br>打开powershell，输入wsl –list,得到计算机内安装的wsl系统，输入<code>wsl shutdown docker-desktop-data</code> 和<code>wsl shutdown docker-desktop</code> 然后输入<code>wsl export docker-desktop-data &lt;target_path/docker-desktop-data.tar.gz&gt;</code>和<code>wsl export docker-desktop &lt;target_path/docker-desktop.tar.gz&gt; </code></p><p>导出后，进行删除wsl中的镜像，最后<code>wsl import &lt;target/path/docker-desktop.tar.gz&gt;</code>和 <code>&lt;target/path/docker-desktop-data.tar.gz&gt;</code></p><p>当然有一种更取巧的方法，那就是软链接，具体软链接的命令，可以上网搜寻。</p><h2 id="docker安装redis"><a href="#docker安装redis" class="headerlink" title="docker安装redis"></a>docker安装redis</h2><p>我们以redis为例子，因为要想在windows上直接使用redis，是一件比较困难的事情，作者在这里选择使用docker来安装，因为是最省事。ok，话不多说，开始以下教程。</p><p>首先，使用<code>docker pull redis</code>命令来获取得到redis的镜像包，在这里说明一下，docker的容器与镜像的关系就好比，对象与类的关系。当你使用<code>docker run redis</code>的时候，可以近似地理解docker为你通过redis类创造出了redis对象，而你对redis对象的任何修改都不会涉及到redis类（这句话不完全对，以后的博客会说明）,docker使用命令-v 可以挂载宿主机的硬盘到容器内部，-p可以暴露端口号给容器，具体命令如下，<br><code>docker run -d -p 6379:6379 --name redis-msater --restart=always -v F:\redis\redis-data:/data -v F:\redis\redis.conf:/etc/redis/redis.conf redis redis-server /etc/redis/redis.conf </code><br>即暴露宿主机的F:\redis\redis-data，F:\redis\redis.conf 到容器内部，然后用命令redis以我的配置文件运行，那样就如同redis安装我们的机器上，但同时因为docker只挂载了2个目录，没有其他残余的文件产生，因此卸载也很方便，–restart=always 表明docker容器无论怎样，都会重新启动，实现开机自启动。</p>]]></content>
    
    
    <categories>
      
      <category>编程人生</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
